glmnet
?glmnet
k <- subset(data_train, select = -ViolentCrimesPerPop)
p <- subset(data_train, select = ViolentCrimesPerPop)
model <- glmnet(x = k, y = p, alpha = 1)
X_train <- as.matrix(data_train[, -1])
y_train <- as.matrix(data_train[, 1])
model <- glmnet(x = X_train, y = y_train, alpha = 1)
X_train <- as.matrix(data_train[, -1])
y_train <- as.matrix(data_train[, 1])
model <- glmnet(x = X_train, y = y_train, alpha = 1)
predictions <- predict(model, newx = X_test)
X_train <- as.matrix(data_train[, -1])
y_train <- as.matrix(data_train[, 1])
X_test <- as.matrix(data_test[, -1])
y_test <- as.matrix(data_test[, 1])
model <- glmnet(x = X_train, y = y_train, alpha = 1)
predictions <- predict(model, newx = X_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- glmnet(k, p, alpha = 0, lambda = 0.1)
p <- data_train$ViolentCrimesPerPop
model <- glmnet(k, p, alpha = 0, lambda = 0.1)
model <- glmnet(x = k, y = p, alpha = 1)
X_train <- subset(data_train, select = -ViolentCrimesPerPop)
y_train <- data_train$ViolentCrimesPerPop
X_test <- subset(data_test, select = -ViolentCrimesPerPop)
y_test <- data_test$ViolentCrimesPerPop
model <- glmnet(x = X_train, y = y_train, alpha = 1)
predictions <- predict(model, newx = X_test)
model <- glmnet(x = X_train, y = y_train, alpha = 1)
predictions <- predict(model, newx = X_test)
predictions <- predict(model, newx = data_test)
predictions <- predict(model, newx = X_test)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
X_train <- subset(data_train, select = -ViolentCrimesPerPop)
y_train <- data_train$ViolentCrimesPerPop
X_test <- subset(data_test, select = -ViolentCrimesPerPop)
y_test <- data_test$ViolentCrimesPerPop
model <- glmnet(x = X_train, y = y_train, alpha = 1)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- glmnet(k, p, alpha = 0, lambda = 0.1)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
split <- createDataPartition(y = data_complete2$ViolentCrimesPerPop, p = 0.9, list = FALSE)
data_train <- data_complete2[split, ]
data_test <- data_complete2[-split, ]
X_train <- subset(data_train, select = -ViolentCrimesPerPop)
y_train <- data_train$ViolentCrimesPerPop
X_test <- subset(data_test, select = -ViolentCrimesPerPop)
y_test <- data_test$ViolentCrimesPerPop
model <- lm(ViolentCrimesPerPop ~ ., data = data_train)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
results <- train(ViolentCrimesPerPop ~ ., data = data_mean, method = "lm", trControl = cv, metric = metric)
cv <- trainControl(method = "cv", number = 10)
metric <- "MSE"
results <- train(ViolentCrimesPerPop ~ ., data = data_mean, method = "lm", trControl = cv, metric = metric)
print(results)
0.1469274^2
model <- nnet(ViolentCrimesPerPop ~ ., data = data_train, size = 6, decay = 0.1)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
variables <- names(data_train)
variables <- variables[variables != "ViolentCrimesPerPop"]
formula <- paste("ViolentCrimesPerPop ~", paste(variables, collapse = " + "))
model <- gam(as.formula(formula), data = data_train)
print(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- glmnet(x = X_train, y = y_train, alpha = 1)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- glmnet(k, p, alpha = 0, lambda = 0.1)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
library(leaps)
model <- regsubsets(X_train, y_train, nbest = 1, method = "bic")
?regsubsets
model <- regsubsets(X_train, y_train, nbest = 1, method = "backward")
predictions <- predict(model, newx = as.matrix(X_test))
model <- glmnet(X_train, y_train, alpha = 0, nlambda = 100, lambda.min.ratio = 0.0001, standardize = TRUE, intercept = TRUE, score.response = "bic")
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- glmnet(X_train, y_train, alpha = 1, standardize = TRUE, intercept = TRUE, score.response = "bic")
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
library(rpart)
model <- rpart(ViolentCrimesPerPop ~ ., data = data_train)
model <- rpart(ViolentCrimesPerPop ~ ., data = data_train)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- rpart(ViolentCrimesPerPop ~ ., data = data_train)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- randomForest(ViolentCrimesPerPop ~ ., data = data_train)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- randomForest(ViolentCrimesPerPop ~ ., data = data_train, ntree = 100)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- randomForest(ViolentCrimesPerPop ~ ., data = data_train, ntree = 1000)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
?rpart
model <- randomForest(ViolentCrimesPerPop ~ ., data = data_train, ntree = 1000)
rpart.plot(model, box.palette="RdBu", shadow.col="gray", fallen.leaves=FALSE)
plotcp(model)
model <- rpart(ViolentCrimesPerPop ~ ., data = data_train)
plotcp(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- rpart(ViolentCrimesPerPop ~ ., data = data_train)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
plotcp(model)
printcp(model)
model <- rpart(ViolentCrimesPerPop ~ ., data = data_train, control = rpart.control(xval = 10, minbucket = 10, cp = 0)))
model <- rpart(ViolentCrimesPerPop ~ ., data = data_train, control = rpart.control(xval = 10, minbucket = 10, cp = 0))
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
plotcp(model)
printcp(model)
model <- rpart(ViolentCrimesPerPop ~ ., data = data_train, control = rpart.control(xval = 10, minbucket = 10, cp = 0))
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
plotcp(model)
printcp(model)
i.min <- which.min(model$cptable[,4])
cp.opt <- model$cptable[i.min,1]
pruned_tree <- prune(model, cp=cp.opt)
predictions <- predict(pruned_tree, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- rpart(ViolentCrimesPerPop ~ ., data = data_train, control = rpart.control(xval = 10, minbucket = 10, cp = 0))
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
plotcp(model)
#printcp(model)
i.min <- which.min(model$cptable[,4])
cp.opt <- model$cptable[i.min,1]
pruned_tree <- prune(model, cp=cp.opt)
predictions <- predict(pruned_tree, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
?randomForest
p <- ncol(data_train)-1
model <- randomForest(ViolentCrimesPerPop ~ ., data = data_train, mtry = p)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- randomForest(ViolentCrimesPerPop ~ ., data = data_train)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
cv.out <- cv.glmnet(X_train, y_train, alpha=0, standardize=TRUE)
cv.out <- cv.glmnet(X_train, y_train, alpha=0, standardize=TRUE)
cv.out <- cv.glmnet(as.matrix(X_train), y_train, alpha=0, standardize=TRUE)
model <- glmnet(X_train, y_train, lambda=cv.out$lambda.min, alpha=0, standardize=TRUE)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- glmnet(k, p, alpha = 0, lambda = 0.1)
model <- glmnet(as.matrix(X_train), y_train, alpha = 0, lambda = 0.1)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
cv.out <- cv.glmnet(as.matrix(X_train), y_train, alpha=0, standardize=TRUE)
model <- glmnet(X_train, y_train, lambda=cv.out$lambda.min, alpha=0, standardize=TRUE)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
cv.out <- cv.glmnet(as.matrix(X_train), y_train, alpha=0, standardize=TRUE)
model <- glmnet(X_train, y_train, lambda=cv.out$lambda.min, alpha=0, standardize=TRUE)
predictions <- predict(model, s=cv.out$lambda.min, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- glmnet(x = X_train, y = y_train, alpha = 1)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
cv.out <- cv.glmnet(as.matrix(X_train), y_train, alpha=1, standardize=TRUE)
model <- glmnet(X_train, y_train, lambda=cv.out$lambda.min, alpha=1, standardize=TRUE)
predictions <- predict(model, s=cv.out$lambda.min, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
model <- regsubsets(medv~.,data=data_train, method='forward', nvmax=30)
model <- regsubsets(ViolentCrimesPerPop ~.,data=data_train, method='forward', nvmax=30)
res.forward <- summary(reg.forward)
res.forward <- summary(model)
best <- which.min(res.forward$bic)
ntst <- nrow(xtst)
ntst <- nrow(as.matrix(X_test))
X <- cbind(rep(1,ntst),xtst)
X <- cbind(rep(1,ntst),as.matrix(X_test))
ypred<-X[,res.forward$which[best,]]%*%coef(reg.forward,best)
ypred<-X[,res.forward$which[best,]]%*%coef(model,best)
mse.forward.bic<-mean((ypred-y.test)^2)
mse.forward.bic<-mean((ypred-data_test$ViolentCrimesPerPop)^2)
mse.forward.bic
model <- regsubsets(ViolentCrimesPerPop ~.,data=data_train, method='forward', nvmax=30)
res.forward <- summary(model)
best <- which.min(res.forward$bic)
ntst <- nrow(as.matrix(X_test))
X <- cbind(rep(1,ntst),as.matrix(X_test))
ypred<-X[,res.forward$which[best,]]%*%coef(model,best)
mse.forward.bic<-mean((ypred-data_test$ViolentCrimesPerPop)^2)
mse.forward.bic
liste_mse <- list()
split <- createDataPartition(y = data_complete2$ViolentCrimesPerPop, p = 0.9, list = FALSE)
data_train <- data_complete2[split, ]
data_test <- data_complete2[-split, ]
X_train <- subset(data_train, select = -ViolentCrimesPerPop)
y_train <- data_train$ViolentCrimesPerPop
X_test <- subset(data_test, select = -ViolentCrimesPerPop)
y_test <- data_test$ViolentCrimesPerPop
liste_mse <- list()
# Cross-validation avec 10 plis
cv <- trainControl(method = "cv", number = 10)
metric <- "MSE"
################### Prédiction avec Mclust #####################
#model <- Mclust(data_train, G = 4)
#clusters <- predict(model, data_train)
################### Prédiction avec régression linéaire #####################
model <- lm(ViolentCrimesPerPop ~ ., data = data_train)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(RegLinéaire = mse))
#results <- train(ViolentCrimesPerPop ~ ., data = data_mean, method = "lm", trControl = cv, metric = metric)
#print(results)
################### Prédiction avec forêt aléatoire #####################
model <- randomForest(ViolentCrimesPerPop ~ ., data = data_train)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(RandomForest = mse))
################### Prédiction avec réseau de neurones #####################
model <- nnet(ViolentCrimesPerPop ~ ., data = data_train, size = 6, decay = 0.1)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(NeuralNetwork = mse))
################### Prédiction avec GAM #####################
variables <- names(data_train)
variables <- variables[variables != "ViolentCrimesPerPop"]
formula <- paste("ViolentCrimesPerPop ~", paste(variables, collapse = " + "))
model <- gam(as.formula(formula), data = data_train)
print(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(GAM = mse))
k <- 10
results <- cv.gam(data_train, formula, k = k)
split <- createDataPartition(y = data_complete2$ViolentCrimesPerPop, p = 0.9, list = FALSE)
data_train <- data_complete2[split, ]
data_test <- data_complete2[-split, ]
X_train <- subset(data_train, select = -ViolentCrimesPerPop)
y_train <- data_train$ViolentCrimesPerPop
X_test <- subset(data_test, select = -ViolentCrimesPerPop)
y_test <- data_test$ViolentCrimesPerPop
liste_mse <- list()
# Cross-validation avec 10 plis
cv <- trainControl(method = "cv", number = 10)
metric <- "MSE"
################### Prédiction avec Mclust #####################
#model <- Mclust(data_train, G = 4)
#clusters <- predict(model, data_train)
################### Prédiction avec régression linéaire #####################
model <- lm(ViolentCrimesPerPop ~ ., data = data_train)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(RegLinéaire = mse))
#results <- train(ViolentCrimesPerPop ~ ., data = data_mean, method = "lm", trControl = cv, metric = metric)
#print(results)
################### Prédiction avec forêt aléatoire #####################
model <- randomForest(ViolentCrimesPerPop ~ ., data = data_train)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(RandomForest = mse))
################### Prédiction avec réseau de neurones #####################
model <- nnet(ViolentCrimesPerPop ~ ., data = data_train, size = 6, decay = 0.1)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(NeuralNetwork = mse))
################### Prédiction avec GAM #####################
variables <- names(data_train)
variables <- variables[variables != "ViolentCrimesPerPop"]
formula <- paste("ViolentCrimesPerPop ~", paste(variables, collapse = " + "))
model <- gam(as.formula(formula), data = data_train)
print(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(GAM = mse))
#k <- 10
#results <- cv.gam(data_train, formula, k = k)
#results <- train(formula, data = data_train, method = "gam", trControl = cv, metric = metric)
#print(results)
################### Prédiction avec Regression Lasso #####################
model <- glmnet(x = X_train, y = y_train, alpha = 1)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(Lasso1 = mse))
cv.out <- cv.glmnet(as.matrix(X_train), y_train, alpha=1, standardize=TRUE)
model <- glmnet(X_train, y_train, lambda=cv.out$lambda.min, alpha=1, standardize=TRUE)
predictions <- predict(model, s=cv.out$lambda.min, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(Lasso2 = mse))
################### Prédiction avec Regression Ridge #####################
model <- glmnet(as.matrix(X_train), y_train, alpha = 0, lambda = 0.1)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(Ridge1 = mse))
cv.out <- cv.glmnet(as.matrix(X_train), y_train, alpha=0, standardize=TRUE)
model <- glmnet(X_train, y_train, lambda=cv.out$lambda.min, alpha=0, standardize=TRUE)
predictions <- predict(model, s=cv.out$lambda.min, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(Ridge2 = mse))
################### Prédiction avec Regression Ridge et critère BIC #####################
model <- glmnet(X_train, y_train, alpha = 0, nlambda = 100, lambda.min.ratio = 0.0001, standardize = TRUE, intercept = TRUE, score.response = "bic")
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(RidgeBIC = mse))
################### Prédiction avec Regression Lasso et critère BIC #####################
model <- glmnet(X_train, y_train, alpha = 1, standardize = TRUE, intercept = TRUE, score.response = "bic")
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(LassoBIC = mse))
################### Prédiction avec arbre de régression #####################
model <- rpart(ViolentCrimesPerPop ~ ., data = data_train, control = rpart.control(xval = 10, minbucket = 10, cp = 0))
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
#plotcp(model)
#printcp(model)
list_mse <- c(liste_mse, list(RegTree = mse))
i.min <- which.min(model$cptable[,4])
cp.opt <- model$cptable[i.min,1]
pruned_tree <- prune(model, cp=cp.opt)
predictions <- predict(pruned_tree, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
list_mse <- c(liste_mse, list(PrunedTree = mse))
################### Prédiction avec subset selection variables #####################
model <- regsubsets(ViolentCrimesPerPop ~.,data=data_train, method='forward', nvmax=30)
res.forward <- summary(model)
best <- which.min(res.forward$bic)
ntst <- nrow(as.matrix(X_test))
X <- cbind(rep(1,ntst),as.matrix(X_test))
ypred<-X[,res.forward$which[best,]]%*%coef(model,best)
mse <-mean((ypred-data_test$ViolentCrimesPerPop)^2)
list_mse <- c(liste_mse, list(SubSelVar = mse))
View(list_mse)
liste_mse <- list()
split <- createDataPartition(y = data_complete2$ViolentCrimesPerPop, p = 0.9, list = FALSE)
data_train <- data_complete2[split, ]
data_test <- data_complete2[-split, ]
X_train <- subset(data_train, select = -ViolentCrimesPerPop)
y_train <- data_train$ViolentCrimesPerPop
X_test <- subset(data_test, select = -ViolentCrimesPerPop)
y_test <- data_test$ViolentCrimesPerPop
liste_mse <- list()
# Cross-validation avec 10 plis
cv <- trainControl(method = "cv", number = 10)
metric <- "MSE"
################### Prédiction avec Mclust #####################
#model <- Mclust(data_train, G = 4)
#clusters <- predict(model, data_train)
################### Prédiction avec régression linéaire #####################
model <- lm(ViolentCrimesPerPop ~ ., data = data_train)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
liste_mse <- c(liste_mse, list(RegLinéaire = mse))
#results <- train(ViolentCrimesPerPop ~ ., data = data_mean, method = "lm", trControl = cv, metric = metric)
#print(results)
################### Prédiction avec forêt aléatoire #####################
model <- randomForest(ViolentCrimesPerPop ~ ., data = data_train)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
liste_mse <- c(liste_mse, list(RandomForest = mse))
################### Prédiction avec réseau de neurones #####################
model <- nnet(ViolentCrimesPerPop ~ ., data = data_train, size = 6, decay = 0.1)
summary(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
liste_mse <- c(liste_mse, list(NeuralNetwork = mse))
################### Prédiction avec GAM #####################
variables <- names(data_train)
variables <- variables[variables != "ViolentCrimesPerPop"]
formula <- paste("ViolentCrimesPerPop ~", paste(variables, collapse = " + "))
model <- gam(as.formula(formula), data = data_train)
print(model)
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
liste_mse <- c(liste_mse, list(GAM = mse))
#k <- 10
#results <- cv.gam(data_train, formula, k = k)
#results <- train(formula, data = data_train, method = "gam", trControl = cv, metric = metric)
#print(results)
################### Prédiction avec Regression Lasso #####################
model <- glmnet(x = X_train, y = y_train, alpha = 1)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
liste_mse <- c(liste_mse, list(Lasso1 = mse))
cv.out <- cv.glmnet(as.matrix(X_train), y_train, alpha=1, standardize=TRUE)
model <- glmnet(X_train, y_train, lambda=cv.out$lambda.min, alpha=1, standardize=TRUE)
predictions <- predict(model, s=cv.out$lambda.min, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
liste_mse <- c(liste_mse, list(Lasso2 = mse))
################### Prédiction avec Regression Ridge #####################
model <- glmnet(as.matrix(X_train), y_train, alpha = 0, lambda = 0.1)
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
liste_mse <- c(liste_mse, list(Ridge1 = mse))
cv.out <- cv.glmnet(as.matrix(X_train), y_train, alpha=0, standardize=TRUE)
model <- glmnet(X_train, y_train, lambda=cv.out$lambda.min, alpha=0, standardize=TRUE)
predictions <- predict(model, s=cv.out$lambda.min, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
liste_mse <- c(liste_mse, list(Ridge2 = mse))
################### Prédiction avec Regression Ridge et critère BIC #####################
model <- glmnet(X_train, y_train, alpha = 0, nlambda = 100, lambda.min.ratio = 0.0001, standardize = TRUE, intercept = TRUE, score.response = "bic")
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
liste_mse <- c(liste_mse, list(RidgeBIC = mse))
################### Prédiction avec Regression Lasso et critère BIC #####################
model <- glmnet(X_train, y_train, alpha = 1, standardize = TRUE, intercept = TRUE, score.response = "bic")
predictions <- predict(model, newx = as.matrix(X_test))
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
liste_mse <- c(liste_mse, list(LassoBIC = mse))
################### Prédiction avec arbre de régression #####################
model <- rpart(ViolentCrimesPerPop ~ ., data = data_train, control = rpart.control(xval = 10, minbucket = 10, cp = 0))
predictions <- predict(model, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
#plotcp(model)
#printcp(model)
liste_mse <- c(liste_mse, list(RegTree = mse))
i.min <- which.min(model$cptable[,4])
cp.opt <- model$cptable[i.min,1]
pruned_tree <- prune(model, cp=cp.opt)
predictions <- predict(pruned_tree, newdata = data_test)
mse <- mean((predictions - data_test$ViolentCrimesPerPop)^2)
print(mse)
liste_mse <- c(liste_mse, list(PrunedTree = mse))
################### Prédiction avec subset selection variables #####################
model <- regsubsets(ViolentCrimesPerPop ~.,data=data_train, method='forward', nvmax=30)
res.forward <- summary(model)
best <- which.min(res.forward$bic)
ntst <- nrow(as.matrix(X_test))
X <- cbind(rep(1,ntst),as.matrix(X_test))
ypred<-X[,res.forward$which[best,]]%*%coef(model,best)
mse <-mean((ypred-data_test$ViolentCrimesPerPop)^2)
liste_mse <- c(liste_mse, list(SubSelVar = mse))
View(liste_mse)
